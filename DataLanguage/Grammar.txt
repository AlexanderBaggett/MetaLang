Grammar Definitions:
'' denotes terminals
{} denotes 1 or more of something
= denotes start of a production
[] denotes zero or more of something 
| indiecates choice
/ indicates choice
-> indicates context (read as when)
<> indicates zero or 1 of something
unlike EBNF we do not punctuate the grammmar. 
So  there are not commas between terminals.
And there are no semicolons at the end of productions
// indicates comments

//Terminals are defined using string constants or regular expressions


Every generated class from these should have a
-List of tokens
-List of components
-A parser 
-Code it generates
-optimization options


Program =  [Import_Directive]  {Namespace} 

Import_Directive = 
					| 'using' '(' Directive [',' Directive] ')'

Directive =	
		| Identifier '=' Identifier
		| Identifier

Qualified_identifier =
	Identifier
	 | Qualified_identifier, '.', Identifier;

Namespace = 'namespace' Identifier '{'  {Class}  '}'

Statement = 
			| Declaration_Statement
			| Embedded_Statement
			| Control_Statement
			| Assignment_Expression
			| Method_Invocation
			| Iteration_Statement


Embedded_Statement = '{' {Statement '\n'} '}'

Case_Statement = 
				|'case' Case_Value ':'
				|'case' Case_Value ':' {Statement}  Case_Option
				|'case' Case_Value {'|' Case_Value} ':'
				|'case' Case_Value {'|' Case_Value} ':' {Statement}  Case_Option
				| Literal ':' {Statement} Case_Option
				| Boolean_Expression ':' {Statement} Case_Option
				|'default' ':' Case_Option

Case_Option =  
				| 'break'
				| 'continue'
				| 'goto'

Case_Value = 
	| Identifier
	| Literal

Identifier = [a-zA-Z$_][a-zA-Z0-9$_]*


Declaration_Statement = 
						| Declaration_Type Identifier '='  Expression 
						| Declaration_Type Identifier '=~' Statement
						| Declaration_Type Identifier '=~' Class_Declaration

Declaration_Type =
					| 'var'
					| StackType
					| HeapType


Control_Statement = 
					| If_Statement
					| Iteration_Statement
					| Switch_Statement

Switch_Statement =  'switch' '(' Expression ')'  { '\n' Case_Statement }

If_Statement =
	 | 'if' '(' Boolean_Expression ')' Embedded_Statement <'else' Embedded_Statement>
	 | 'if' '(' Boolean_Expression ')' Embedded_Statement ['elseif' '(' Boolean_Expression ')' Embedded_Statement] <'else' Embedded_Statement>
	 | 'if' Boolean_Expression Embedded_Statement
	 | 'if' Boolean_Expression Embedded_Statement 'elseif' Boolean_Expression Embedded_Statement
	 


Iteration_Statement = | For_Statement
		      | While_Statement
		      | Foreach_Statement
		   
While_Statement =  'while' '(' Boolean_Expression ')' Embedded_Statement

Foreach_Statement = 'foreach' '(' Declaration_Statement 'in' Identifier ')' Embedded_Statement

For_Statement =
	|'for' '(' [for_initializer], ';' [for_condition] ';' [for_iterator], ')' Embedded_Statement
	|'for' For_Range_Expression Embedded_Statement
	|'for' Tuple_Pattern 'in' Identifier Embedded_Statement 
	|'for' Identifier 'in' Identifier Embedded_Statement 
	|'for' Tuple_Pattern 'in' Identifier Embedded_Statement 'do'
	|'for' Identifier 'in' Identifier 'do' Expression


Tuple_Pattern =   '(' {Identifier [',' Identifier]} ')'
		

for_initializer =
	 | Declaration_Statement
	 | Statement_Expression_list

for_condition = Boolean_expression

for_iterator =
	Statement_Expression_list

Statement_Expression_list =
	 | Statement_expression
	 | Statement_expression_list, ',' Statement_expression


Expression =

	| If_Expression
	| Try_Expression
	| Parens_Expression
	| Value_Expression
	| Lamda_Expression
	| Operator_Expression
	| Null_Replacement_Expression
	| Identifier_Expression


If_Expression = 
				| 'if' '(' Boolean_Expression ')' '{' Expression '}' ['elseif' '(' Expression ')'Value_Expression ]  <'else' '{' Expression '}'>
				| 'if' Boolean_Expression 'then' Expression  ['elseif' Boolean_Expression 'then' Expression]    <'else' Expression>


Try_Expresion = 'try' '{' Expression '}' {'catch' '(' HeapType Identifier ')' '{' Expresion '}'} < 'finally' '{' Expression '}'

Parens_Expression = '(' Expression ')'

Value_Expression =
	|HeapType_Expression
	|StackType_Expression
	|Identifier

StackType_Expression =
	|Boolean_Expression 
	|Struct_Expression
	|Literal
	
Boolean_Expression=
	| Boolean_Literal
	| {Expression [Boolean_Control_Operator Expression]
	| '!' Expression
	|  '(' Expression ')'
	
	
Boolean_Control_Operator=
	| '&&'
	| '||'
	| '=='
	| '!="
	| '&'
	| '|'
	| '<'
	| '<='
	| '>'
	| '>='
		
Lamda_Expression = 
	| Identifier '=>' Expression
	| '(' Identifier [',' Identifier] ')' '=>' Expression



	//Terminals are Operators here
Operator_Expression =
		| Unary_Operator_Expression
		| Infix_Operator_Expression      
		| PostFix_Operator_Expression
		| Ternary_Expression

Unary_Operator_Expression =
		| Incrememnt_Expression
		| Decrement_Exprssion 
		| Negative_Exprssion

Incrememnt_Expression  = Identifier '++'
Decrement_Exprssion = Identifier '--'
Negative_Exprssiuon = '-' Identifier

Infix_Operator_Expression = 
	| Add_Expression
	| Subtract_Exprssion
	| Multiply_Expression
	| Divide_Expression
	| Modulus_Expression
	| Assignment_Expression
	| Range_Expression
	| For_Range_Expression
	| Bitshift_Expression
	| Function_Composition_Expression
	

Add_Expression = Expression '+' Expression
Subtract_Expression = Exprssion '-' Expression
Multiply_Expression = Exprssion '*' Expression
Divide_Exrpession = Expression '/' Expression
Modulus_Expression = Expression '%' Expression
Assignment_Expression = Expression Assignment_Operator Expression

Assignment_Operator =  
						| '='
						| '*='
						| '/='
						| '%='
						| '+='
						| '-='
						| '<<='
						| '>>='
						| '&='
						| '^='
						| '|='

Range_Expression = 
	| Expression '..' Expression
	| Expression '..' Expression '..' Expression

For_Range_Expression = 
	| Integer_Expression '..' Integer_Expression
	| Integer_Expression '..' Integer_Expression '..' Integer_Expression

BitShift_Expression = 
	| Expression '>>>' Expression
	| Expression '<<<' Expression

Function_Composition_Expression = 
	| Expression '>>' Expression
	| Expression '<<' Expression
	
					
Null_Replacement_Expression = Expression '?? Expression

PostFix_Operator_Expression = 
		| Array_Access_Expression
		| NullSafe_Array_Access_Expression
		| Class_Access_Expression
		| Dictionary_Access_Expression
		| Member_Access_Expression
		| NullSafe_Member_Access_Expression

Array_Access_Expression = 
							| Identifier '[' Expression ']'
							| Identifier '[' Range_Expression   ']'
							| Identifier '[' Expression [',' Expression] ']'

NullSafe_Array_Access_Expression =
									| Identifier '?[' Expression ']'
									| Identifier '?[' Range_Expression   ']'
									| Identifier '?[' Expression [',' Expression] ']'

Class_Access_Expression = 'this' '.' Identifier ['.' Identifier]
Member_Access_Expression = Identifier '.' Identifier ['.' Identifier]
NullSafe_Member_Access_Expression = Identifier '?.' Identifier ['.' Identifier]  ['?.' Identifier]
Dictionary_Access_Expression = Identifier '[' Expression ']'




Ternary_Expression = 
	| Boolean_Expression '?' Expression ':' Expression


Identifier_Expression = 
	| Identifier

Class_Declaration = 
					|<Privacy_Modifier> <'static'> <'sealed'> <'stack'> 'class' Identifier '{' {Class_Member} '}' <':' [Identifier [',' Identifier] ]>
					|<Privacy_Modifier> <'static'> <'sealed'> <'stack'> 'class' Identifier '(' {Parameter_Declaration}   ')' '{' '}'

Privacy_Modifier = 
					| 'public'
					| 'private'
					| 'protected'
					| 'internal'
					| 'protected internal'


Parameter_Declaration = Type Identifier

Type = 
		| Stack_Type
		| Heap_Type

Class_Member =
			| Class_Variable_Declaration
			| Class_Method_Declaration
			| Class_Constructor
			| Class_Destructor
			| Class_Expression_Member

Class_Expression_Member =  <Privacy_Modifier> <'static'> <Method_Member_Modifier> Type '=>' Statement

Class_Method_Declaration = <Privacy_Modifier> <'static'> <Method_Member_Modifier> Type '(' {Parameter_Declaration}   ')' '{' {Statement}   <'return' Expression> '}'

Method_Member_Modifier =
						| 'virtual'
						| 'override'


Enum_Declaration =
					|'enum' Identifier '(' {Identifier}    ')'
					|'enum' Identifier '(' {Identifier ':' Expression}    ')'
					|'enum' Identifier '{' {Identifier '=' Expression [',' Identifier '=' Expression]} '}'
					|'enum' Identifier '{' {Identifier [',' Identifier]} '}'

Literal =
		|String_Literal
		|Key_Value_Pair_Literal
		|Tuple_Literal
		|List_Literal
		|Array_Literal
		|Integer_Literal
		|Double_Literal
		|Float_Literal
		|Big_Int_Literal
		|Long_Literal
		|Decimal_Literal
		|Boolean_Literal

Key_Value_Pair_Literal = Expression '::' Expression
Tuple_Literal = '(' Input {',' Input} ')'
String_Literal = '"' input '"'
Array_Literal = '[|' Range_Pattern '|]'
List_Literal = '[' Expression [',' Expression]  ']'
Boolean_Literal = 'true' | 'false'
